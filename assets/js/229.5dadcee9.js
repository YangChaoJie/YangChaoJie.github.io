(window.webpackJsonp=window.webpackJsonp||[]).push([[229],{658:function(e,a,t){"use strict";t.r(a);var r=t(29),s=Object(r.a)({},(function(){var e=this,a=e.$createElement,t=e._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("ul",[t("li",[t("h4",{attrs:{id:"mvc-的-不实"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#mvc-的-不实"}},[e._v("#")]),e._v(' MVC 的 "不实"')])])]),e._v(" "),t("p",[e._v("谈起iOS框架，我们会下意识的谈起MVC，这个经典框架。但是仔细想想我们并没有做到真正的MVC 的低耦合。 它们之间不断的混用，导致我们的代码不断的增加混乱一直调理不清。我们习惯在model上面写上属性，View上面只是视图控件放在上面。所有的交互基本全部放controller上面，这样会导致我们控制器代码量大大增加，并且逻辑混乱。更重要的是我们测试非常麻烦，一旦有些环节出错会导致整个程序崩溃。")]),e._v(" "),t("ul",[t("li",[t("h4",{attrs:{id:"其他框架"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#其他框架"}},[e._v("#")]),e._v(" 其他框架")]),e._v(" "),t("ol",[t("li",[t("ul",[t("li",[e._v("#####MVP")])]),e._v(" "),t("p",[e._v("MVP 架构拥有三个真正独立的分层，所以在组装的时候会有一些问题，而 MVP 也成了第一个披露了这种问题的架构。因为我们不想让 View 知道 Model 的信息，所以在当前的 ViewController（角色其实是 View）里面去进行组装肯定是不正确的，我们应该在另外的地方完成组装。比如，我们可以创建一个应用层（app-wide）的 Router 服务，让它来负责组装和 View-to-View 的转场。这个问题不仅在 MVP 中存在，在接下来要介绍的模式里面也都有这个问题。")])])])])]),e._v(" "),t("h5",{attrs:{id:"mvp-特点："}},[t("a",{staticClass:"header-anchor",attrs:{href:"#mvp-特点："}},[e._v("#")]),e._v(" MVP 特点：")]),e._v(" "),t("ul",[t("li",[t("p",[e._v("划分 - 我们把大部分的职责都分配到了 Presenter 和 Model 里面，而 View 基本上不需要做什么（在上面的例子里面，Model 也什么都没做）。")])]),e._v(" "),t("li",[t("p",[e._v("可测性 - 简直棒，我们可以通过 View 来测试大部分的业务逻辑。")])]),e._v(" "),t("li",[t("p",[e._v("易用 - 就我们上面那个简单的例子来讲，代码量差不多是 MVC 架构的两倍，但是 MVP 的思路还是蛮清晰的。\nMVP 架构在 iOS 中意味着极好的可测性和巨大的代码量。\n2. * #####MVVM")]),e._v(" "),t("p",[e._v("MVVM 架构是 MV(X) 里面最新的一个，让我们希望它在出现的时候已经考虑到了 MV(X) 模式之前所遇到的问题吧。")])])]),e._v(" "),t("p",[e._v("理论上来说，Model - View - ViewModel 看起来非常棒。View 和 Model 我们已经都熟悉了，中间人的角色我们也熟悉了，但是在这里中间人的角色变成了 ViewModel。")]),e._v(" "),t("h5",{attrs:{id:"mvvm-特点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#mvvm-特点"}},[e._v("#")]),e._v(" MVVM 特点:")]),e._v(" "),t("ul",[t("li",[e._v("MVVM 架构把 ViewController 看做 View。")]),e._v(" "),t("li",[e._v("View 和 Model 之间没有紧耦合")]),e._v(" "),t("li",[e._v("另外，它还像 Supervising 版的 MVP 那样做了数据绑定，不过这次不是绑定 View 和Model，而是绑定 View 和 ViewModel。")])]),e._v(" "),t("p",[e._v("那么，iOS 里面的 ViewModel 到底是个什么东西呢？本质上来讲，他是独立于 UIKit 的， View 和 View 的状态的一个呈现（representation）。ViewModel 能主动调用对 Model 做更改，也能在 Model 更新的时候对自身进行调整，然后通过 View 和 ViewModel 之间的绑定，对 View 也进行对应的更新")]),e._v(" "),t("ul",[t("li",[t("h4",{attrs:{id:"viper-框架"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#viper-框架"}},[e._v("#")]),e._v(" VIPER 框架")]),e._v("\nVIPER 框架，把层次分的更加明确，模块化。更加方便测试！！")])]),e._v(" "),t("h5",{attrs:{id:"viper-设计模式分层："}},[t("a",{staticClass:"header-anchor",attrs:{href:"#viper-设计模式分层："}},[e._v("#")]),e._v(" viper 设计模式分层：")]),e._v(" "),t("ul",[t("li",[e._v("View/User Interface     （视图）")]),e._v(" "),t("li",[e._v("Interaction                 （交互）")]),e._v(" "),t("li",[e._v("Presenter/Event Handler（展示）")]),e._v(" "),t("li",[e._v("Entity                          （实体）")]),e._v(" "),t("li",[e._v("Router/Wirefram            （路由）\n"),t("img",{attrs:{src:"http://upload-images.jianshu.io/upload_images/1603546-3d63a3b3ba13ef33.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240",alt:""}})])]),e._v(" "),t("h5",{attrs:{id:"view-的职责："}},[t("a",{staticClass:"header-anchor",attrs:{href:"#view-的职责："}},[e._v("#")]),e._v(" View 的职责：")]),e._v(" "),t("ul",[t("li",[e._v("显示信息给用户")]),e._v(" "),t("li",[e._v("检测用户交互\n视图是由presenter告诉显示什么，它告诉presenter当一个事件需要发生。")])]),e._v(" "),t("h5",{attrs:{id:"presenter的责任："}},[t("a",{staticClass:"header-anchor",attrs:{href:"#presenter的责任："}},[e._v("#")]),e._v(" Presenter的责任：")]),e._v(" "),t("ul",[t("li",[e._v("告诉视图显示什么内容")]),e._v(" "),t("li",[e._v("处理事件"),t("br"),e._v("\nPresenter告诉视图来显示什么，以及相应地处理事件")])]),e._v(" "),t("h5",{attrs:{id:"interaction的责任："}},[t("a",{staticClass:"header-anchor",attrs:{href:"#interaction的责任："}},[e._v("#")]),e._v(" Interaction的责任：")]),e._v(" "),t("ul",[t("li",[e._v("执行业务逻辑")]),e._v(" "),t("li",[e._v("Interaction是执行，围绕数据围绕应用程序的业务逻辑。")])]),e._v(" "),t("h5",{attrs:{id:"data-manager管理职责："}},[t("a",{staticClass:"header-anchor",attrs:{href:"#data-manager管理职责："}},[e._v("#")]),e._v(" Data manager管理职责：")]),e._v(" "),t("ul",[t("li",[e._v("检索数据")]),e._v(" "),t("li",[e._v("存储数据（可选）\nData manager是知道在哪里检索的数据，如果存在可以保存起来。")])]),e._v(" "),t("h5",{attrs:{id:"service-的职责："}},[t("a",{staticClass:"header-anchor",attrs:{href:"#service-的职责："}},[e._v("#")]),e._v(" service 的职责：")]),e._v(" "),t("ul",[t("li",[e._v("执行网络向服务器请求用于特定实体\n服务对象VIPER不是必须存在的，但一个我们已经发现非常有用的。")])]),e._v(" "),t("h5",{attrs:{id:"entity-的责任："}},[t("a",{staticClass:"header-anchor",attrs:{href:"#entity-的责任："}},[e._v("#")]),e._v(" Entity 的责任：")]),e._v(" "),t("ul",[t("li",[e._v("表示数据\n实体是非常直接的和你所期望的。他们体现了某种类型的数据和行为，作为被其他类之间传来传去的“有效载荷”。例如，数据管理器返回到交互件，它返回到演示，然后使用该实体来告诉它应该显示的视图的实体的实体。")])]),e._v(" "),t("h5",{attrs:{id:"wireframe-职责："}},[t("a",{staticClass:"header-anchor",attrs:{href:"#wireframe-职责："}},[e._v("#")]),e._v(" WireFrame 职责：")]),e._v(" "),t("ul",[t("li",[e._v("初始化所有其他类")]),e._v(" "),t("li",[e._v("处理数据包路由到应用其他视图")])]),e._v(" "),t("p",[e._v("Wireframe是所有其它部件VIPER什么胶合彼此并处理导航从一个视图到另一个应用程序。")]),e._v(" "),t("h6",{attrs:{id:"个人感觉，类似于网络通信层（tcp-udp），每个层之间通过代理协议进行通信，逐层传递信息，最后在view上展示-，请参考下图："}},[t("a",{staticClass:"header-anchor",attrs:{href:"#个人感觉，类似于网络通信层（tcp-udp），每个层之间通过代理协议进行通信，逐层传递信息，最后在view上展示-，请参考下图："}},[e._v("#")]),e._v(" 个人感觉，类似于网络通信层（TCP/UDP），每个层之间通过代理协议进行通信，逐层传递信息，最后在view上展示 ，请参考下图：")]),e._v(" "),t("p",[t("img",{attrs:{src:"https://ycjmarkdownimage.oss-cn-beijing.aliyuncs.com/images/viper.png",alt:""}})]),e._v(" "),t("ul",[t("li",[t("h4",{attrs:{id:"关于viper-的脚本生成方法，通过终端可以安装可以自动生成相应的模块，很方便的哦。"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#关于viper-的脚本生成方法，通过终端可以安装可以自动生成相应的模块，很方便的哦。"}},[e._v("#")]),e._v(" 关于VIPER 的脚本生成方法，通过终端可以安装可以自动生成相应的模块，很方便的哦。")]),e._v(" "),t("ul",[t("li",[e._v("首先在Ruby环境下安装 viper")]),e._v(" "),t("li",[e._v("然后你就可以通过 cd 到工程的文件内创建VIPER")])]),e._v(" "),t("div",{staticClass:"language-Swift line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-swift"}},[t("code",[e._v(" sudo gem install vipergen\n vipergen generate "),t("span",{pre:!0,attrs:{class:"token builtin"}},[e._v("Login")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("--")]),e._v("path"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("/")]),t("span",{pre:!0,attrs:{class:"token builtin"}},[e._v("Users")]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("/")]),e._v("yangchaojie"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("/")]),e._v("tmp "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("--")]),e._v("author"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("xxx "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("--")]),e._v("company"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("ringeartech\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br")])])])]),e._v(" "),t("p",[t("img",{attrs:{src:"http://upload-images.jianshu.io/upload_images/1603546-3d63a3b3ba13ef33.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240",alt:""}})]),e._v(" "),t("h5",{attrs:{id:"ok-到这里框架就创建完毕了，每个模块的作用一目了然。当然可能刚一接触会有点困难，比如我就是。还需花一些时间研究。后续我会更新我所遇到的困难·····"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#ok-到这里框架就创建完毕了，每个模块的作用一目了然。当然可能刚一接触会有点困难，比如我就是。还需花一些时间研究。后续我会更新我所遇到的困难·····"}},[e._v("#")]),e._v(" OK,到这里框架就创建完毕了，每个模块的作用一目了然。当然可能刚一接触会有点困难，比如我就是。还需花一些时间研究。后续我会更新我所遇到的困难·····")])])}),[],!1,null,null,null);a.default=s.exports}}]);