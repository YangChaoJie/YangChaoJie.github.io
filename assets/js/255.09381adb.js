(window.webpackJsonp=window.webpackJsonp||[]).push([[255],{688:function(e,t,v){"use strict";v.r(t);var l=v(29),i=Object(l.a)({},(function(){var e=this,t=e.$createElement,v=e._self._c||t;return v("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[v("h1",{attrs:{id:"面试总结"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#面试总结"}},[e._v("#")]),e._v(" 面试总结")]),e._v(" "),v("p",[e._v("Node:")]),e._v(" "),v("ul",[v("li",[v("p",[e._v("单线程的弱点：")]),e._v(" "),v("ol",[v("li",[e._v("无法利用多核CPU")]),e._v(" "),v("li",[e._v("错误会引起整个应用退出，应用的健壮性值得考验")]),e._v(" "),v("li",[e._v("大量计算占用CPU导致无法继续调用异步I/O\n浏览器中JavaScript与UI公用一个线程一样,js长时间执行会导致UI的渲染和响应被中断。\nH5制定了Web Workers，能够创建工作线程来进行计算，以解决JavaScript大计算阻塞UI的渲染问题。\nnode 采用了与Web workers相同的思路来解决单线程中大量的计算的问题。 child_process.\nlibuv: 在操作系统与Node上层模块系统之间构建了一层平层架构。可以兼容windows 各个平台。")])])]),e._v(" "),v("li",[v("p",[e._v("事件循环、观察者、请求对象、I/O线程池这四者共同构成了Node异步I/O模型的基本要素。")])]),e._v(" "),v("li",[v("p",[e._v("多线程编程经常面临锁、状态同步等问题，这是多线程被诟病的主要原因。但是多线程在多核cpu上能够有效提升CPU的利用率，这个优势是毋庸置疑的。")])]),e._v(" "),v("li",[v("p",[e._v("node  平台间的适配是通过 libuv 实现的。")])]),e._v(" "),v("li",[v("p",[e._v("在node中，除了javascript是单线程外，Node本身是多线程的，只是I/O 线程使用的CPU较少。")])]),e._v(" "),v("li",[v("p",[e._v("事件循环是一个典型的生产者/消费者模型。异步I/O、网络请求等则是事件的生产者，源源不断的为Node 提供不同类型的事件,这些事件被传递到对应的观察者哪里，事件循环从观察者那里取出事件并处理。")])])])])}),[],!1,null,null,null);t.default=i.exports}}]);