(window.webpackJsonp=window.webpackJsonp||[]).push([[238],{664:function(s,a,t){"use strict";t.r(a);var n=t(29),e=Object(n.a)({},(function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h3",{attrs:{id:"swift-的位运算"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#swift-的位运算"}},[s._v("#")]),s._v(" Swift 的位运算")]),s._v(" "),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"custom-block-title"},[s._v("提示")]),s._v(" "),t("p",[s._v("位运算符（Bitwise Operators）： 将操作数 当作32位的比特序列（由0和1组成）（二进制）。按位操作符操作数字的二进制形式。")]),s._v(" "),t("p",[s._v("在许多古老的微处理器上， 位运算比加减运算略快， 通常位运算比乘除法运算要快很多。\n在现代架构中， 情况并非如此：位运算的运算速度通常与加法运算相同（仍然快于乘法运算）。-- 维基百科")]),s._v(" "),t("p",[s._v("Swift 位运算与大部分语言运算一样。良好的位运算有助于开发效率提升。")])]),s._v(" "),t("h4",{attrs:{id:"位运算-常见的-符号"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#位运算-常见的-符号"}},[s._v("#")]),s._v(" 位运算 常见的 符号")]),s._v(" "),t("table",[t("thead",[t("tr",[t("th",[s._v("运算符")]),s._v(" "),t("th",[s._v("用法")]),s._v(" "),t("th",[s._v("描述")])])]),s._v(" "),t("tbody",[t("tr",[t("td",[s._v("按位与（AND）")]),s._v(" "),t("td",[s._v("a & b")]),s._v(" "),t("td",[s._v("对于每一个比特位，只有两个操作数相应的比特位都是1时，结果才为1，否则为0。")])]),s._v(" "),t("tr",[t("td",[s._v("按位或（OR）")]),s._v(" "),t("td",[s._v("a或b")]),s._v(" "),t("td",[s._v("对于每一个比特位，当两个操作数相应的比特位至少有一个1时，结果为1，否则为0。")])]),s._v(" "),t("tr",[t("td",[s._v("按位异或（XOR）")]),s._v(" "),t("td",[s._v("a ^ b")]),s._v(" "),t("td",[s._v("对于每一个比特位，当两个操作数相应的比特位有且只有一个1时，结果为1，否则为0。")])]),s._v(" "),t("tr",[t("td",[s._v("按位非（NOT）")]),s._v(" "),t("td",[s._v("~ a")]),s._v(" "),t("td",[s._v("反转操作数的比特位，即0变成1，1变成0。")])]),s._v(" "),t("tr",[t("td",[s._v("左移（Left shift）")]),s._v(" "),t("td",[s._v("a << b")]),s._v(" "),t("td",[s._v("将 a 的二进制形式向左移 b (< 32) 比特位，右边用0填充")])]),s._v(" "),t("tr",[t("td",[s._v("有符号右移")]),s._v(" "),t("td",[s._v("a >> b")]),s._v(" "),t("td",[s._v("将 a 的二进制表示向右移 b (< 32) 位，丢弃被移出的位。")])]),s._v(" "),t("tr",[t("td",[s._v("有符号右移")]),s._v(" "),t("td",[s._v("a >>> b")]),s._v(" "),t("td",[s._v("将 a 的二进制表示向右移 b (< 32) 位，丢弃被移出的位。")])])])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("/// & (按位与)\n   9 (base 10) = 00000000000000000000000000001001 (base 2)\n  14 (base 10) = 00000000000000000000000000001110 (base 2)\n                   --------------------------------\n14 & 9 (base 10) = 00000000000000000000000000001000 (base 2) = 8 (base 10)\n\n/// | (按位或)\n     9 (base 10) = 00000000000000000000000000001001 (base 2)\n    14 (base 10) = 00000000000000000000000000001110 (base 2)\n                   --------------------------------\n14 | 9 (base 10) = 00000000000000000000000000001111 (base 2) = 15 (base 10)\n\n/// ^ (按位异或)\n 9 (base 10) = 00000000000000000000000000001001 (base 2)\n    14 (base 10) = 00000000000000000000000000001110 (base 2)\n                   --------------------------------\n14 ^ 9 (base 10) = 00000000000000000000000000000111 (base 2) = 7 (base 10)\n\n/// ~ (按位非) 对任一数值 x 进行按位非操作的结果为 -(x + 1)。例如，~5 结果为 -6。\n 9 (base 10) = 00000000000000000000000000001001 (base 2)\n               --------------------------------\n~9 (base 10) = 11111111111111111111111111110110 (base 2) = -10 (base 10)\n\n/// << (左移)\n/// 该操作符会将第一个操作数向左移动指定的位数。向左被移出的位被丢弃，右侧用 0 补充。\n/// 在数字 x 上左移 y 比特得到 x * 2y.\n     9 (base 10): 00000000000000000000000000001001 (base 2)\n                  --------------------------------\n9 << 2 (base 10): 00000000000000000000000000100100 (base 2) = 36 (base 10)\n\n/// >> (有符号右移)\n/// 该操作符会将第一个操作数向右移动指定的位数。向右被移出的位被丢弃，拷贝最左侧的位以填充左侧。由于新的最左侧的位总是和以前相同，符号位没有被改变。所以被称作“符号传播”\n/// 9 >> 2 得到 2:\n\n     9 (base 10): 00000000000000000000000000001001 (base 2)\n                  --------------------------------\n9 >> 2 (base 10): 00000000000000000000000000000010 (base 2) = 2 (base 10)\n\n/// -9 >> 2 得到 -3，因为符号被保留了。\n\n     -9 (base 10): 11111111111111111111111111110111 (base 2)\n                   --------------------------------\n-9 >> 2 (base 10): 11111111111111111111111111111101 (base 2) = -3 (base 10)\n\n>>> (无符号右移)\n/// 该操作符会将第一个操作数向右移动指定的位数。向右被移出的位被丢弃，左侧用0填充。因为符\n/// 号位变成了 0，所以结果总是非负的。（译注：即便右移 0 个比特，结果也是非负的。）\n/// 有符号右移和无符号右移总是返回相同的结果\n/// -9 >>> 2 产生 1073741821 这和 -9 >> 2 不同：\n -9 (base 10): 11111111111111111111111111110111 (base 2)\n                    --------------------------------\n-9 >>> 2 (base 10): 00111111111111111111111111111101 (base 2) = 1073741821 (base 10)\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br"),t("span",{staticClass:"line-number"},[s._v("30")]),t("br"),t("span",{staticClass:"line-number"},[s._v("31")]),t("br"),t("span",{staticClass:"line-number"},[s._v("32")]),t("br"),t("span",{staticClass:"line-number"},[s._v("33")]),t("br"),t("span",{staticClass:"line-number"},[s._v("34")]),t("br"),t("span",{staticClass:"line-number"},[s._v("35")]),t("br"),t("span",{staticClass:"line-number"},[s._v("36")]),t("br"),t("span",{staticClass:"line-number"},[s._v("37")]),t("br"),t("span",{staticClass:"line-number"},[s._v("38")]),t("br"),t("span",{staticClass:"line-number"},[s._v("39")]),t("br"),t("span",{staticClass:"line-number"},[s._v("40")]),t("br"),t("span",{staticClass:"line-number"},[s._v("41")]),t("br"),t("span",{staticClass:"line-number"},[s._v("42")]),t("br"),t("span",{staticClass:"line-number"},[s._v("43")]),t("br"),t("span",{staticClass:"line-number"},[s._v("44")]),t("br"),t("span",{staticClass:"line-number"},[s._v("45")]),t("br"),t("span",{staticClass:"line-number"},[s._v("46")]),t("br"),t("span",{staticClass:"line-number"},[s._v("47")]),t("br"),t("span",{staticClass:"line-number"},[s._v("48")]),t("br"),t("span",{staticClass:"line-number"},[s._v("49")]),t("br"),t("span",{staticClass:"line-number"},[s._v("50")]),t("br"),t("span",{staticClass:"line-number"},[s._v("51")]),t("br"),t("span",{staticClass:"line-number"},[s._v("52")]),t("br")])]),t("h4",{attrs:{id:"有符号32位整数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#有符号32位整数"}},[s._v("#")]),s._v(" 有符号32位整数")]),s._v(" "),t("p",[s._v("按位操作符的操作数 都会被转成补码 （two's complement）形式的有符号32位整数。\n补码形式是指一个数的负对应值（negative counterpart）（如 5和-5）为数值的所有比特位反转后，再加1。")]),s._v(" "),t("p",[s._v("补码保证了当一个数是正数时，其最左的比特位是0，当一个数是负数时，其最左的比特位是1。因此，最左边的比特位被称为符号位（sign bit）。")]),s._v(" "),t("div",{staticClass:"language-Swift line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-swift"}},[t("code",[t("span",{pre:!0,attrs:{class:"token number"}},[s._v("00000000000000000000000100111010")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 314")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("11111111111111111111111011000101")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// ~314")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("11111111111111111111111011000110")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 再加一")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("div",{staticClass:"language-Swift line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-swift"}},[t("code",[s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 0 是所有比特数字0组成的整数。")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("base "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("00000000000000000000000000000000")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("base "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// -1 是所有比特数字1组成的整数。")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("base "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("11111111111111111111111111111111")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("base "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// -2147483648（十六进制形式：-0x80000000）是除了最左边为1外，其他比特位都为0的整数。")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2147483648")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("base "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("10000000000000000000000000000000")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("base "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 2147483647（十六进制形式：0x7fffffff）是除了最左边为0外，其他比特位都为1的整数。")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2147483647")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("base "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("01111111111111111111111111111111")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("base "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 数字-2147483648 和 2147483647 是32位有符号数字所能表示的最小和最大整数。")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br")])]),t("h4",{attrs:{id:"swift-位运算应用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#swift-位运算应用"}},[s._v("#")]),s._v(" Swift 位运算应用")]),s._v(" "),t("h5",{attrs:{id:"数值交换"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数值交换"}},[s._v("#")]),s._v(" 数值交换")]),s._v(" "),t("div",{staticClass:"language-Swift line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-swift"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("func")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("swap")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("a "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("Int")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" b"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("Int")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    a "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" a "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("^")]),s._v(" b \n    b "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" a "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("^")]),s._v(" b "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v(" b "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" b"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("^")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("a"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("^")]),s._v("b"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" b "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("b"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("^")]),s._v("b"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("^")]),s._v("a "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" a"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    a "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" a "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("^")]),s._v(" b "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v(" a "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("a"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("^")]),s._v("b"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("^")]),s._v("a "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("a"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("^")]),s._v("a"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("^")]),s._v("b "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" b"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("h5",{attrs:{id:"位操作统计二进制中-1-的个数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#位操作统计二进制中-1-的个数"}},[s._v("#")]),s._v(" 位操作统计二进制中 1 的个数")]),s._v(" "),t("p",[s._v("计算其 a &= (a-1)的结果：\n第一次：计算前：1000 0110 1101 1000 计算后：1000 0110 1101 0000\n第二次：计算前：1000 0110 1101 0000 计算后：1000 0110 1100 0000\n第二次：计算前：1000 0110 1100 0000 计算后：1000 0110 1000 0000 我们发现，没计算一次二进制中就少了一个 1，则我们可以通过下面方法去统计：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("。count = 0  \nwhile(a){  \n  a = a & (a - 1);  \n  count++;  \n} \n\nfunc countOfOnes(num: UInt) -UInt {\n    var count: UInt = 0\n    var temp = num\n    while temp != 0 {\n        count += 1\n        temp = temp & (temp - 1)\n    }\n    return count\n}\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br")])]),t("p",[s._v("引申： 如何判断 一个整数位2的整数次幂\n如果整数如果是2的整数次方，那么它的二进制表示有且只有一个位是1，而且其他所有位都是0")])])}),[],!1,null,null,null);a.default=e.exports}}]);